{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mkdocs-table-reader-plugin MkDocs plugin that adds a {{ read_csv('table.csv') }} markdown tag to directly insert CSV files as a table into a page. Other supported table file formats are excel ( .xls , .xlsx ), fixed-width ( .fwf ), json ( .json ) and yaml ( .yaml ). For a workflow with other plugins see the blogpost building reproducible reports with MkDocs Installation Install the plugin using pip3 : pip3 install mkdocs-table-reader-plugin Next, add the following lines to your mkdocs.yml : plugins: - search - table-reader If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. MkDocs enables it by default if there is no plugins entry set. Usage In your markdown documents you can now use: {{ read_csv('path_to_table.csv') }} Where the path is relative to the location of your project's mkdocs.yml file (although you can change that to be relative to your docs/ directory). Documentation See timvink.github.io/mkdocs-table-reader-plugin/ .","title":"Home"},{"location":"#mkdocs-table-reader-plugin","text":"MkDocs plugin that adds a {{ read_csv('table.csv') }} markdown tag to directly insert CSV files as a table into a page. Other supported table file formats are excel ( .xls , .xlsx ), fixed-width ( .fwf ), json ( .json ) and yaml ( .yaml ). For a workflow with other plugins see the blogpost building reproducible reports with MkDocs","title":"mkdocs-table-reader-plugin"},{"location":"#installation","text":"Install the plugin using pip3 : pip3 install mkdocs-table-reader-plugin Next, add the following lines to your mkdocs.yml : plugins: - search - table-reader If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. MkDocs enables it by default if there is no plugins entry set.","title":"Installation"},{"location":"#usage","text":"In your markdown documents you can now use: {{ read_csv('path_to_table.csv') }} Where the path is relative to the location of your project's mkdocs.yml file (although you can change that to be relative to your docs/ directory).","title":"Usage"},{"location":"#documentation","text":"See timvink.github.io/mkdocs-table-reader-plugin/ .","title":"Documentation"},{"location":"customization/","text":"Customization You can customize the resulting markdown tables! Theory Under the hood mkdocs-table-reader-plugin is basically doing: import pandas as pd df = pd . read_csv ( 'path_to_table.csv' ) df . to_markdown ( index = False , tablefmt = 'pipe' ) Any keyword arguments you give to {{ read_csv('path_to_your_table.csv') }} will be matched and passed the corresponding pandas.read_csv() or .to_markdown() functions. Pandas's .to_markdown() uses the tabulate package and any keyword arguments that are passed to it. Tabulate in turn offers many customization options, see library usage . Aligning columns Text columns will be aligned to the left by default , whilst columns which contain only numbers will be aligned to the right. You can override this behaviour using tabulate 's custom column alignment . Example: left center right {{ read_csv('tables/basic_table.csv', colalign=(\"left\",)) }} a b 40 73 50 52 531456.123 80 name table1 {{ read_csv('tables/basic_table.csv', colalign=(\"center\",)) }} a b 40 73 50 52 531456.123 80 name table1 {{ read_csv('tables/basic_table.csv', colalign=(\"right\",)) }} a b 40 73 50 52 531456.123 80 name table1 Sortable tables If you use mkdocs-material , you can configure sortable tables . Number formatting You can use tabulate 's number formatting . Example: {{ read_fwf('tables/fixedwidth_table.txt', floatfmt=\".0f\") }} Brand Price Honda Civic 22001 Toyota Corolla 25000 Ford Focus 27000 Audi A4 35000 {{ read_fwf('tables/fixedwidth_table.txt', floatfmt=\".1f\") }} Brand Price Honda Civic 22001.0 Toyota Corolla 25000.0 Ford Focus 27000.0 Audi A4 35000.0 {{ read_fwf('tables/fixedwidth_table.txt', floatfmt=\".2f\") }} Brand Price Honda Civic 22001.00 Toyota Corolla 25000.00 Ford Focus 27000.00 Audi A4 35000.00","title":"Customization"},{"location":"customization/#customization","text":"You can customize the resulting markdown tables!","title":"Customization"},{"location":"customization/#theory","text":"Under the hood mkdocs-table-reader-plugin is basically doing: import pandas as pd df = pd . read_csv ( 'path_to_table.csv' ) df . to_markdown ( index = False , tablefmt = 'pipe' ) Any keyword arguments you give to {{ read_csv('path_to_your_table.csv') }} will be matched and passed the corresponding pandas.read_csv() or .to_markdown() functions. Pandas's .to_markdown() uses the tabulate package and any keyword arguments that are passed to it. Tabulate in turn offers many customization options, see library usage .","title":"Theory"},{"location":"customization/#aligning-columns","text":"Text columns will be aligned to the left by default , whilst columns which contain only numbers will be aligned to the right. You can override this behaviour using tabulate 's custom column alignment . Example: left center right {{ read_csv('tables/basic_table.csv', colalign=(\"left\",)) }} a b 40 73 50 52 531456.123 80 name table1 {{ read_csv('tables/basic_table.csv', colalign=(\"center\",)) }} a b 40 73 50 52 531456.123 80 name table1 {{ read_csv('tables/basic_table.csv', colalign=(\"right\",)) }} a b 40 73 50 52 531456.123 80 name table1","title":"Aligning columns"},{"location":"customization/#sortable-tables","text":"If you use mkdocs-material , you can configure sortable tables .","title":"Sortable tables"},{"location":"customization/#number-formatting","text":"You can use tabulate 's number formatting . Example: {{ read_fwf('tables/fixedwidth_table.txt', floatfmt=\".0f\") }} Brand Price Honda Civic 22001 Toyota Corolla 25000 Ford Focus 27000 Audi A4 35000 {{ read_fwf('tables/fixedwidth_table.txt', floatfmt=\".1f\") }} Brand Price Honda Civic 22001.0 Toyota Corolla 25000.0 Ford Focus 27000.0 Audi A4 35000.0 {{ read_fwf('tables/fixedwidth_table.txt', floatfmt=\".2f\") }} Brand Price Honda Civic 22001.00 Toyota Corolla 25000.00 Ford Focus 27000.00 Audi A4 35000.00","title":"Number formatting"},{"location":"options/","text":"Options You can customize the plugin by setting options in mkdocs.yml . For example: plugins: - table-reader: data_path: \"docs\" base_path: \"config_dir\" data_path Default is . , which means you can specify the path to your table files relative to the base_path , which defaults to the directory where your project's mkdocs.yml file is located. If you use a folder for all your table files you can shorten the path specification by setting data_path . For example, if you set data_path to docs/tables/ in the project below, you will be able to use {{ read_csv(\"basic_table.csv\") }} instead of {{ read_csv(\"docs/tables/basic_table.csv\") }} inside index.md . . \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 tables/ \u2502 | \u2514\u2500\u2500 basic_table.csv \u2502 \u2514\u2500\u2500 index.md \u2514\u2500\u2500 mkdocs.yml base_path The base path where mkdocs-table-reader-plugin will search for input files. The value is a string, one of docs_dir or config_dir . The default is config_dir . config_dir : the directory where your project's mkdocs.yml file is located. docs_dir : the directory where your projects' docs/ folder is located.","title":"Options"},{"location":"options/#options","text":"You can customize the plugin by setting options in mkdocs.yml . For example: plugins: - table-reader: data_path: \"docs\" base_path: \"config_dir\"","title":"Options"},{"location":"options/#data_path","text":"Default is . , which means you can specify the path to your table files relative to the base_path , which defaults to the directory where your project's mkdocs.yml file is located. If you use a folder for all your table files you can shorten the path specification by setting data_path . For example, if you set data_path to docs/tables/ in the project below, you will be able to use {{ read_csv(\"basic_table.csv\") }} instead of {{ read_csv(\"docs/tables/basic_table.csv\") }} inside index.md . . \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 tables/ \u2502 | \u2514\u2500\u2500 basic_table.csv \u2502 \u2514\u2500\u2500 index.md \u2514\u2500\u2500 mkdocs.yml","title":"data_path"},{"location":"options/#base_path","text":"The base path where mkdocs-table-reader-plugin will search for input files. The value is a string, one of docs_dir or config_dir . The default is config_dir . config_dir : the directory where your project's mkdocs.yml file is located. docs_dir : the directory where your projects' docs/ folder is located.","title":"base_path"},{"location":"readers/","text":"Readers The following table reader functions are available: read_csv {{ read_csv() }} passed to pandas.read_csv() . Example: Input Output {{ read_csv('tables/basic_table.csv') }} a b 40 73 50 52 531456.123 80 name table1 read_fwf {{ read_fwf() }} passed to pandas.read_fwf() . Example: Input Output {{ read_fwf('tables/fixedwidth_table.txt') }} Brand Price Honda Civic 22001 Toyota Corolla 25000 Ford Focus 27000 Audi A4 35000 read_yaml {{ read_yaml() }} is parsed with yaml.safe_load() and passed to pandas.json_normalize() . Example: Input Output {{ read_yaml('tables/yaml_table.yml') }} a b 40 73 50 52 531456 80 name table1 read_table {{ read_table() }} passed to pandas.read_table() . Example: Input Output {{ read_table('tables/basic_table.csv', sep = ',') }} a b 40 73 50 52 531456.123 80 name table1 read_json {{ read_json() }} passed to pandas.read_json() . Example: Input Output {{ read_json('tables/data.json') }} columns index data 0 col 1 row 1 ['a', 'b'] 1 col 2 row 2 ['c', 'd'] read_excel {{ read_excel() }} passed to pandas.read_excel() . Example: Input Output {{ read_excel('tables/excel_table.xlsx') }} a b 40 73 50 52 531456 8 Reading xlsx files You might get a XLRDError('Excel xlsx file; not supported',) error when trying to read modern excel files. That's because xlrd does not support .xlsx files ( stackoverflow post ). Instead, install openpyxl and use: {{ read_excel('tables/excel_table.xlsx', engine='openpyxl') }}","title":"Readers"},{"location":"readers/#readers","text":"The following table reader functions are available:","title":"Readers"},{"location":"readers/#read_csv","text":"{{ read_csv() }} passed to pandas.read_csv() . Example: Input Output {{ read_csv('tables/basic_table.csv') }} a b 40 73 50 52 531456.123 80 name table1","title":"read_csv"},{"location":"readers/#read_fwf","text":"{{ read_fwf() }} passed to pandas.read_fwf() . Example: Input Output {{ read_fwf('tables/fixedwidth_table.txt') }} Brand Price Honda Civic 22001 Toyota Corolla 25000 Ford Focus 27000 Audi A4 35000","title":"read_fwf"},{"location":"readers/#read_yaml","text":"{{ read_yaml() }} is parsed with yaml.safe_load() and passed to pandas.json_normalize() . Example: Input Output {{ read_yaml('tables/yaml_table.yml') }} a b 40 73 50 52 531456 80 name table1","title":"read_yaml"},{"location":"readers/#read_table","text":"{{ read_table() }} passed to pandas.read_table() . Example: Input Output {{ read_table('tables/basic_table.csv', sep = ',') }} a b 40 73 50 52 531456.123 80 name table1","title":"read_table"},{"location":"readers/#read_json","text":"{{ read_json() }} passed to pandas.read_json() . Example: Input Output {{ read_json('tables/data.json') }} columns index data 0 col 1 row 1 ['a', 'b'] 1 col 2 row 2 ['c', 'd']","title":"read_json"},{"location":"readers/#read_excel","text":"{{ read_excel() }} passed to pandas.read_excel() . Example: Input Output {{ read_excel('tables/excel_table.xlsx') }} a b 40 73 50 52 531456 8 Reading xlsx files You might get a XLRDError('Excel xlsx file; not supported',) error when trying to read modern excel files. That's because xlrd does not support .xlsx files ( stackoverflow post ). Instead, install openpyxl and use: {{ read_excel('tables/excel_table.xlsx', engine='openpyxl') }}","title":"read_excel"}]}